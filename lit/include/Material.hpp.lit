== Material ==
A material holds details on how to obtain illumination
from an object. It contains information on the diffuse,
specular and emmisive qualities of an object.

== Get color ==
Use our shading model in this material to compute the color
for the given light. Note, the intersection is the ray->
object intersection.
-
glm::vec3 GetColor(std::vector<Light*> light, Intersection* intersection, glm::vec3 reflectColor);
-

== Private variables ==
Material properties such as
* ambient
* diffuse
* specular
* emission
* shininess
* ambient color
The ambient color in this implementation is defined on
a per object basis, but it really should be on a per
scene basis.
As each object has it's own material, it should be fine
to put it in the material.
-
glm::vec3 _ambient;
glm::vec3 _diffuse;
glm::vec3 _specular;
glm::vec3 _emission;
float _shininess;
glm::vec3 _attenuation;
-

== Getters and setters for private variables ==
-
void SetAmbient(float r, float g, float b);
glm::vec3 GetAmbient() { return _ambient; }

void SetDiffuse(float r, float g, float b);
glm::vec3 GetDiffuse() { return _diffuse; }

void SetSpecular(float r, float g, float b);
glm::vec3 GetSpecular() { return _specular; }

void SetEmission(float r, float g, float b);
glm::vec3 GetEmission() { return _emission; }

void SetShininess(float value) { _shininess = value; }
float GetShininess() { return _shininess; }

void SetAttenuation(float a, float b, float c);
-

== The class ==
-
class Material {
  public:
  Material();
  ~Material(){};

  Getters and setters for private variables.

  Get color.

  private:
  Private variables.
};
-

== Includes ==
-
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include "Intersection.hpp"
#include "Light.hpp"
-

== Include guard ==
-
#ifndef MATERIAL_H
#define MATERIAL_H

Includes.

The class.

#endif
-

== @Material.hpp ==
Include guard.
