== Scene ==
The scene describes what will be rendered to the
image. It holds references to geometry and lights,
and has functionality to load scenes from files.

== Render to image ==
When the scene is created, an empty Image is created
for it. This function will cause the scene to
render itself to the image, and then save the image
to disk.
-
void RenderToImage();
-

== Trace ray ==
Because this is a recursive ray tracer, we need a
separate, private method that will trace a single ray,
and then we need to call that method from within
the pixel array loop, any reflection calculation, etc.
-
glm::vec3 TraceRay(Ray ray, int depth = 0);
-

== Intersect ==
As a part of the ray tracer, we need to perform a lot
of ray scene intersections, in multiple contexts. As
such, we have a method to perform ray scene intersections.
-
Intersection* Intersect(Ray ray, float max_t = 100.f, bool lighting = false);
-

== Add RenderObject ==
Add a render object to the scene.
-
void AddRenderObject(RenderObject* renderObject);
-

== Add Light ==
Add a light to the scene
-
void AddLight(Light* light);
-

== Getters and setters for scene attributes ==
-
void SetCamera(Camera* value) { _camera = value; }
void SetOutputFilename(std::string value) { _outputFilename = value; }
void SetWidth(int value) { _width = value; }
void SetHeight(int value) { _height = value; }
void SetMaxDepth(int value) { _maxDepth = value; }
void SetMin(glm::vec3 value) { _min = value; }
void SetMax(glm::vec3 value) { _max = value; }
-

== Rule of three ==
Usually when we define a destructor for a class,
we should define a copy constructor and a copy operator
overload.

However, in this instance, a shallow copy of a Scene is
acceptable. We won't want to duplicate the handlers and
image data, so copies will essentially be handles.

== Private variables ==
Private variables include:
* pointer to the image to render to
* width and height of scene
* a reference to the camera
* a list of render objects to render
* a list of lights
* name of the output file
* a maximum recursion depth
-
int _width;
int _height;
std::string _outputFilename;
int _maxDepth;
Image* _img;
Camera* _camera;
std::vector<RenderObject*> _renderObjects;
std::vector<Light*> _lights;
glm::vec3 _min;
glm::vec3 _max;
Octree* _octree;
-

== The class ==
-
class Scene {
  public:
  Scene();
  ~Scene();

  Add RenderObject.
  Add Light.
  Getters and setters for scene attributes.

  Render to image.

  private:
  Private variables.

  Trace ray.
  Intersect.
};
-

== Includes ==
-
#include <string>
#include <map>
#include <queue>
#include <vector>

#include "Image.hpp"
#include "Camera.hpp"
#include "RenderObject.hpp"
#include "Light.hpp"
#include "TriMesh.hpp"
#include "Material.hpp"
#include "Octree.hpp"
-

== Include guard ==
-
#ifndef SCENE_H
#define SCENE_H

Includes.

The class.

#endif
-

== @Scene.hpp ==
Include guard.
